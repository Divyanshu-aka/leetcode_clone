// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String    @id @default(uuid())
  fullname                     String?
  username                     String    @unique
  email                        String    @unique
  image                        String?
  role                         UserRole  @default(USER)
  password                     String
  emailVerified                Boolean   @default(false)
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  refreshToken                 String?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?
  lastverificationEmailSent    DateTime?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  problems      Problem[] // Relation to Problem model
  submissions   Submission[] // Relation to Submission model
  problemSolved ProblemSolved[] // Relation to ProblemSolved model
  playlists     Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[] //["tag1", "tag2", "tag3"]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json // [{"input": "input1", "output": "output1"}, {"input": "input2", "output": "output2"}]
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission        Submission[] // Relation to Submission model
  solvedBy          ProblemSolved[] // Relation to ProblemSolved model
  ProblemsPlaylists ProblemsInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String //Accepted, Wrong Answer, {Time Limit Exceeded, Runtime Error, Compilation Error}
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcases TestCaseResult[] // Relation to TestCaseResult model
}

model TestCaseResult {
  id             String  @id @default(uuid())
  submissionId   String
  testcase       Int
  passes         Boolean
  stdout         String?
  expectedOutput String
  stderr         String?
  compileOutput  String?
  status         String //Passed, Failed, Skipped
  memory         String?
  time           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId]) // Ensure a user can only solve a problem once
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemsInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name]) // Ensure a user can only have one playlist with the same name
}

model ProblemsInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}
